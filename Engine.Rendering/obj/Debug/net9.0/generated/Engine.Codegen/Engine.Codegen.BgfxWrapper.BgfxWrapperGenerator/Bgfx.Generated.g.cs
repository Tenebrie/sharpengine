// <auto-generated/>
#nullable enable
using System;
using System.Runtime.InteropServices;
namespace Engine.Codegen.Bgfx;

using Caps = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps;
using Internaldata = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InternalData;
using Platformdata = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.PlatformData;
using Resolution = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Resolution;
using InitStruct = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Init;
using Memory = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory;
using Transientindexbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientIndexBuffer;
using Transientvertexbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer;
using Instancedatabuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InstanceDataBuffer;
using Textureinfo = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureInfo;
using Uniforminfo = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformInfo;
using Attachment = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attachment;
using Transform = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Transform;
using Viewstats = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ViewStats;
using Encoderstats = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.EncoderStats;
using Stats = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Stats;
using Vertexlayout = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout;
using Encoder = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder;
using Dynamicindexbufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle;
using Dynamicvertexbufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle;
using Framebufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle;
using Indexbufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle;
using Indirectbufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle;
using Occlusionqueryhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle;
using Programhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle;
using Shaderhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle;
using Texturehandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle;
using Uniformhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle;
using Vertexbufferhandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle;
using Vertexlayouthandle = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle;
using <attributes>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout.<attributes>e__FixedBuffer;
using <offset>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout.<offset>e__FixedBuffer;
using <numprims>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Stats.<numPrims>e__FixedBuffer;
using <name>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ViewStats.<name>e__FixedBuffer;
using Uniforminfo<name>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformInfo.<name>e__FixedBuffer;
using Limits = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Init.Limits;
using Gpu = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps.GPU;
using CapsLimits = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps.Limits;
using <formats>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps.<formats>e__FixedBuffer;
using <gpu>eFixedbuffer = global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps.<gpu>e__FixedBuffer;

public static unsafe partial class Bgfx
{
    public static void AttachmentInit(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attachment* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access, ushort _layer, ushort _numLayers, ushort _mip, byte _resolve) => bgfx.attachment_init(_this, _handle, _access, _layer, _numLayers, _mip, _resolve);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* VertexLayoutBegin(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.RendererType _rendererType) => bgfx.vertex_layout_begin(_this, _rendererType);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* VertexLayoutAdd(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attrib _attrib, byte _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.AttribType _type, bool _normalized, bool _asInt) => bgfx.vertex_layout_add(_this, _attrib, _num, _type, _normalized, _asInt);
    public static void VertexLayoutDecode(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attrib _attrib, byte* _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.AttribType* _type, bool* _normalized, bool* _asInt) => bgfx.vertex_layout_decode(_this, _attrib, _num, _type, _normalized, _asInt);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* VertexLayoutSkip(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _this, byte _num) => bgfx.vertex_layout_skip(_this, _num);
    public static void VertexLayoutEnd(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _this) => bgfx.vertex_layout_end(_this);
    public static void VertexPack(float _input, bool _inputNormalized, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attrib _attr, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, void* _data, uint _index) => bgfx.vertex_pack(_input, _inputNormalized, _attr, _layout, _data, _index);
    public static void VertexUnpack(float _output, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attrib _attr, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, void* _data, uint _index) => bgfx.vertex_unpack(_output, _attr, _layout, _data, _index);
    public static void VertexConvert(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _dstLayout, void* _dstData, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _srcLayout, void* _srcData, uint _num) => bgfx.vertex_convert(_dstLayout, _dstData, _srcLayout, _srcData, _num);
    public static uint WeldVertices(void* _output, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, void* _data, uint _num, bool _index32, float _epsilon) => bgfx.weld_vertices(_output, _layout, _data, _num, _index32, _epsilon);
    public static uint TopologyConvert(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TopologyConvert _conversion, void* _dst, uint _dstSize, void* _indices, uint _numIndices, bool _index32) => bgfx.topology_convert(_conversion, _dst, _dstSize, _indices, _numIndices, _index32);
    public static void TopologySortTriList(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TopologySort _sort, void* _dst, uint _dstSize, float _dir, float _pos, void* _vertices, uint _stride, void* _indices, uint _numIndices, bool _index32) => bgfx.topology_sort_tri_list(_sort, _dst, _dstSize, _dir, _pos, _vertices, _stride, _indices, _numIndices, _index32);
    public static byte GetSupportedRenderers(byte _max, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.RendererType* _enum) => bgfx.get_supported_renderers(_max, _enum);
    public static nint GetRendererName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.RendererType _type) => bgfx.get_renderer_name(_type);
    public static void InitCtor(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Init* _init) => bgfx.init_ctor(_init);
    public static bool Init(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Init* _init) => bgfx.init(_init);
    public static void Shutdown() => bgfx.shutdown();
    public static void Reset(uint _width, uint _height, uint _flags, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format) => bgfx.reset(_width, _height, _flags, _format);
    public static uint Frame(bool _capture) => bgfx.frame(_capture);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.RendererType GetRendererType() => bgfx.get_renderer_type();
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Caps* GetCaps() => bgfx.get_caps();
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Stats* GetStats() => bgfx.get_stats();
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* Alloc(uint _size) => bgfx.alloc(_size);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* Copy(void* _data, uint _size) => bgfx.copy(_data, _size);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* MakeRef(void* _data, uint _size) => bgfx.make_ref(_data, _size);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* MakeRefRelease(void* _data, uint _size, nint _releaseFn, void* _userData) => bgfx.make_ref_release(_data, _size, _releaseFn, _userData);
    public static void SetDebug(uint _debug) => bgfx.set_debug(_debug);
    public static void DbgTextClear(byte _attr, bool _small) => bgfx.dbg_text_clear(_attr, _small);
    public static void DbgTextPrintf(ushort _x, ushort _y, byte _attr, string _format, string args) => bgfx.dbg_text_printf(_x, _y, _attr, _format, args);
    public static void DbgTextVprintf(ushort _x, ushort _y, byte _attr, string _format, nint _argList) => bgfx.dbg_text_vprintf(_x, _y, _attr, _format, _argList);
    public static void DbgTextImage(ushort _x, ushort _y, ushort _width, ushort _height, void* _data, ushort _pitch) => bgfx.dbg_text_image(_x, _y, _width, _height, _data, _pitch);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle CreateIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, ushort _flags) => bgfx.create_index_buffer(_mem, _flags);
    public static void SetIndexBufferName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle, string _name, int _len) => bgfx.set_index_buffer_name(_handle, _name, _len);
    public static void DestroyIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle) => bgfx.destroy_index_buffer(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle CreateVertexLayout(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout) => bgfx.create_vertex_layout(_layout);
    public static void DestroyVertexLayout(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.destroy_vertex_layout(_layoutHandle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle CreateVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, ushort _flags) => bgfx.create_vertex_buffer(_mem, _layout, _flags);
    public static void SetVertexBufferName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, string _name, int _len) => bgfx.set_vertex_buffer_name(_handle, _name, _len);
    public static void DestroyVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle) => bgfx.destroy_vertex_buffer(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle CreateDynamicIndexBuffer(uint _num, ushort _flags) => bgfx.create_dynamic_index_buffer(_num, _flags);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle CreateDynamicIndexBufferMem(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, ushort _flags) => bgfx.create_dynamic_index_buffer_mem(_mem, _flags);
    public static void UpdateDynamicIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle, uint _startIndex, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.update_dynamic_index_buffer(_handle, _startIndex, _mem);
    public static void DestroyDynamicIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle) => bgfx.destroy_dynamic_index_buffer(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle CreateDynamicVertexBuffer(uint _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, ushort _flags) => bgfx.create_dynamic_vertex_buffer(_num, _layout, _flags);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle CreateDynamicVertexBufferMem(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, ushort _flags) => bgfx.create_dynamic_vertex_buffer_mem(_mem, _layout, _flags);
    public static void UpdateDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.update_dynamic_vertex_buffer(_handle, _startVertex, _mem);
    public static void DestroyDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle) => bgfx.destroy_dynamic_vertex_buffer(_handle);
    public static uint GetAvailTransientIndexBuffer(uint _num, bool _index32) => bgfx.get_avail_transient_index_buffer(_num, _index32);
    public static uint GetAvailTransientVertexBuffer(uint _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout) => bgfx.get_avail_transient_vertex_buffer(_num, _layout);
    public static uint GetAvailInstanceDataBuffer(uint _num, ushort _stride) => bgfx.get_avail_instance_data_buffer(_num, _stride);
    public static void AllocTransientIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientIndexBuffer* _tib, uint _num, bool _index32) => bgfx.alloc_transient_index_buffer(_tib, _num, _index32);
    public static void AllocTransientVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, uint _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout) => bgfx.alloc_transient_vertex_buffer(_tvb, _num, _layout);
    public static bool AllocTransientBuffers(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayout* _layout, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientIndexBuffer* _tib, uint _numIndices, bool _index32) => bgfx.alloc_transient_buffers(_tvb, _layout, _numVertices, _tib, _numIndices, _index32);
    public static void AllocInstanceDataBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InstanceDataBuffer* _idb, uint _num, ushort _stride) => bgfx.alloc_instance_data_buffer(_idb, _num, _stride);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle CreateIndirectBuffer(uint _num) => bgfx.create_indirect_buffer(_num);
    public static void DestroyIndirectBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _handle) => bgfx.destroy_indirect_buffer(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle CreateShader(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.create_shader(_mem);
    public static ushort GetShaderUniforms(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle* _uniforms, ushort _max) => bgfx.get_shader_uniforms(_handle, _uniforms, _max);
    public static void SetShaderName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _handle, string _name, int _len) => bgfx.set_shader_name(_handle, _name, _len);
    public static void DestroyShader(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _handle) => bgfx.destroy_shader(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle CreateProgram(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _vsh, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _fsh, bool _destroyShaders) => bgfx.create_program(_vsh, _fsh, _destroyShaders);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle CreateComputeProgram(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ShaderHandle _csh, bool _destroyShaders) => bgfx.create_compute_program(_csh, _destroyShaders);
    public static void DestroyProgram(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _handle) => bgfx.destroy_program(_handle);
    public static bool IsTextureValid(ushort _depth, bool _cubeMap, ushort _numLayers, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags) => bgfx.is_texture_valid(_depth, _cubeMap, _numLayers, _format, _flags);
    public static bool IsFrameBufferValid(byte _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attachment* _attachment) => bgfx.is_frame_buffer_valid(_num, _attachment);
    public static void CalcTextureSize(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureInfo* _info, ushort _width, ushort _height, ushort _depth, bool _cubeMap, bool _hasMips, ushort _numLayers, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format) => bgfx.calc_texture_size(_info, _width, _height, _depth, _cubeMap, _hasMips, _numLayers, _format);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle CreateTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, ulong _flags, byte _skip, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureInfo* _info) => bgfx.create_texture(_mem, _flags, _skip, _info);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle CreateTexture2d(ushort _width, ushort _height, bool _hasMips, ushort _numLayers, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.create_texture_2d(_width, _height, _hasMips, _numLayers, _format, _flags, _mem);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle CreateTexture2dScaled(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.BackbufferRatio _ratio, bool _hasMips, ushort _numLayers, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags) => bgfx.create_texture_2d_scaled(_ratio, _hasMips, _numLayers, _format, _flags);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle CreateTexture3d(ushort _width, ushort _height, ushort _depth, bool _hasMips, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.create_texture_3d(_width, _height, _depth, _hasMips, _format, _flags, _mem);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle CreateTextureCube(ushort _size, bool _hasMips, ushort _numLayers, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.create_texture_cube(_size, _hasMips, _numLayers, _format, _flags, _mem);
    public static void UpdateTexture2d(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, ushort _layer, byte _mip, ushort _x, ushort _y, ushort _width, ushort _height, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, ushort _pitch) => bgfx.update_texture_2d(_handle, _layer, _mip, _x, _y, _width, _height, _mem, _pitch);
    public static void UpdateTexture3d(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, byte _mip, ushort _x, ushort _y, ushort _z, ushort _width, ushort _height, ushort _depth, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem) => bgfx.update_texture_3d(_handle, _mip, _x, _y, _z, _width, _height, _depth, _mem);
    public static void UpdateTextureCube(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, ushort _layer, byte _side, byte _mip, ushort _x, ushort _y, ushort _width, ushort _height, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Memory* _mem, ushort _pitch) => bgfx.update_texture_cube(_handle, _layer, _side, _mip, _x, _y, _width, _height, _mem, _pitch);
    public static uint ReadTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, void* _data, byte _mip) => bgfx.read_texture(_handle, _data, _mip);
    public static void SetTextureName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, string _name, int _len) => bgfx.set_texture_name(_handle, _name, _len);
    public static void* GetDirectAccessPtr(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle) => bgfx.get_direct_access_ptr(_handle);
    public static void DestroyTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle) => bgfx.destroy_texture(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle CreateFrameBuffer(ushort _width, ushort _height, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _textureFlags) => bgfx.create_frame_buffer(_width, _height, _format, _textureFlags);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle CreateFrameBufferScaled(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.BackbufferRatio _ratio, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _textureFlags) => bgfx.create_frame_buffer_scaled(_ratio, _format, _textureFlags);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle CreateFrameBufferFromHandles(byte _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle* _handles, bool _destroyTexture) => bgfx.create_frame_buffer_from_handles(_num, _handles, _destroyTexture);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle CreateFrameBufferFromAttachment(byte _num, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Attachment* _attachment, bool _destroyTexture) => bgfx.create_frame_buffer_from_attachment(_num, _attachment, _destroyTexture);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle CreateFrameBufferFromNwh(void* _nwh, ushort _width, ushort _height, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _depthFormat) => bgfx.create_frame_buffer_from_nwh(_nwh, _width, _height, _format, _depthFormat);
    public static void SetFrameBufferName(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle _handle, string _name, int _len) => bgfx.set_frame_buffer_name(_handle, _name, _len);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle GetTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle _handle, byte _attachment) => bgfx.get_texture(_handle, _attachment);
    public static void DestroyFrameBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle _handle) => bgfx.destroy_frame_buffer(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle CreateUniform(string _name, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformType _type, ushort _num) => bgfx.create_uniform(_name, _type, _num);
    public static void GetUniformInfo(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformInfo* _info) => bgfx.get_uniform_info(_handle, _info);
    public static void DestroyUniform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _handle) => bgfx.destroy_uniform(_handle);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle CreateOcclusionQuery() => bgfx.create_occlusion_query();
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryResult GetResult(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _handle, int* _result) => bgfx.get_result(_handle, _result);
    public static void DestroyOcclusionQuery(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _handle) => bgfx.destroy_occlusion_query(_handle);
    public static void SetPaletteColor(byte _index, float _rgba) => bgfx.set_palette_color(_index, _rgba);
    public static void SetPaletteColorRgba32f(byte _index, float _r, float _g, float _b, float _a) => bgfx.set_palette_color_rgba32f(_index, _r, _g, _b, _a);
    public static void SetPaletteColorRgba8(byte _index, uint _rgba) => bgfx.set_palette_color_rgba8(_index, _rgba);
    public static void SetViewName(ushort _id, string _name, int _len) => bgfx.set_view_name(_id, _name, _len);
    public static void SetViewRect(ushort _id, ushort _x, ushort _y, ushort _width, ushort _height) => bgfx.set_view_rect(_id, _x, _y, _width, _height);
    public static void SetViewRectRatio(ushort _id, ushort _x, ushort _y, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.BackbufferRatio _ratio) => bgfx.set_view_rect_ratio(_id, _x, _y, _ratio);
    public static void SetViewScissor(ushort _id, ushort _x, ushort _y, ushort _width, ushort _height) => bgfx.set_view_scissor(_id, _x, _y, _width, _height);
    public static void SetViewClear(ushort _id, ushort _flags, uint _rgba, float _depth, byte _stencil) => bgfx.set_view_clear(_id, _flags, _rgba, _depth, _stencil);
    public static void SetViewClearMrt(ushort _id, ushort _flags, float _depth, byte _stencil, byte _c0, byte _c1, byte _c2, byte _c3, byte _c4, byte _c5, byte _c6, byte _c7) => bgfx.set_view_clear_mrt(_id, _flags, _depth, _stencil, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7);
    public static void SetViewMode(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ViewMode _mode) => bgfx.set_view_mode(_id, _mode);
    public static void SetViewFrameBuffer(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle _handle) => bgfx.set_view_frame_buffer(_id, _handle);
    public static void SetViewTransform(ushort _id, void* _view, void* _proj) => bgfx.set_view_transform(_id, _view, _proj);
    public static void SetViewOrder(ushort _id, ushort _num, ushort* _order) => bgfx.set_view_order(_id, _num, _order);
    public static void ResetView(ushort _id) => bgfx.reset_view(_id);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* EncoderBegin(bool _forThread) => bgfx.encoder_begin(_forThread);
    public static void EncoderEnd(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _encoder) => bgfx.encoder_end(_encoder);
    public static void EncoderSetMarker(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, string _name, int _len) => bgfx.encoder_set_marker(_this, _name, _len);
    public static void EncoderSetState(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ulong _state, uint _rgba) => bgfx.encoder_set_state(_this, _state, _rgba);
    public static void EncoderSetCondition(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _handle, bool _visible) => bgfx.encoder_set_condition(_this, _handle, _visible);
    public static void EncoderSetStencil(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, uint _fstencil, uint _bstencil) => bgfx.encoder_set_stencil(_this, _fstencil, _bstencil);
    public static ushort EncoderSetScissor(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _x, ushort _y, ushort _width, ushort _height) => bgfx.encoder_set_scissor(_this, _x, _y, _width, _height);
    public static void EncoderSetScissorCached(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _cache) => bgfx.encoder_set_scissor_cached(_this, _cache);
    public static uint EncoderSetTransform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, void* _mtx, ushort _num) => bgfx.encoder_set_transform(_this, _mtx, _num);
    public static void EncoderSetTransformCached(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, uint _cache, ushort _num) => bgfx.encoder_set_transform_cached(_this, _cache, _num);
    public static uint EncoderAllocTransform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Transform* _transform, ushort _num) => bgfx.encoder_alloc_transform(_this, _transform, _num);
    public static void EncoderSetUniform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _handle, void* _value, ushort _num) => bgfx.encoder_set_uniform(_this, _handle, _value, _num);
    public static void EncoderSetIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle, uint _firstIndex, uint _numIndices) => bgfx.encoder_set_index_buffer(_this, _handle, _firstIndex, _numIndices);
    public static void EncoderSetDynamicIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle, uint _firstIndex, uint _numIndices) => bgfx.encoder_set_dynamic_index_buffer(_this, _handle, _firstIndex, _numIndices);
    public static void EncoderSetTransientIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientIndexBuffer* _tib, uint _firstIndex, uint _numIndices) => bgfx.encoder_set_transient_index_buffer(_this, _tib, _firstIndex, _numIndices);
    public static void EncoderSetVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _numVertices) => bgfx.encoder_set_vertex_buffer(_this, _stream, _handle, _startVertex, _numVertices);
    public static void EncoderSetVertexBufferWithLayout(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.encoder_set_vertex_buffer_with_layout(_this, _stream, _handle, _startVertex, _numVertices, _layoutHandle);
    public static void EncoderSetDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _numVertices) => bgfx.encoder_set_dynamic_vertex_buffer(_this, _stream, _handle, _startVertex, _numVertices);
    public static void EncoderSetDynamicVertexBufferWithLayout(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.encoder_set_dynamic_vertex_buffer_with_layout(_this, _stream, _handle, _startVertex, _numVertices, _layoutHandle);
    public static void EncoderSetTransientVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, uint _startVertex, uint _numVertices) => bgfx.encoder_set_transient_vertex_buffer(_this, _stream, _tvb, _startVertex, _numVertices);
    public static void EncoderSetTransientVertexBufferWithLayout(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.encoder_set_transient_vertex_buffer_with_layout(_this, _stream, _tvb, _startVertex, _numVertices, _layoutHandle);
    public static void EncoderSetVertexCount(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, uint _numVertices) => bgfx.encoder_set_vertex_count(_this, _numVertices);
    public static void EncoderSetInstanceDataBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InstanceDataBuffer* _idb, uint _start, uint _num) => bgfx.encoder_set_instance_data_buffer(_this, _idb, _start, _num);
    public static void EncoderSetInstanceDataFromVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _num) => bgfx.encoder_set_instance_data_from_vertex_buffer(_this, _handle, _startVertex, _num);
    public static void EncoderSetInstanceDataFromDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _num) => bgfx.encoder_set_instance_data_from_dynamic_vertex_buffer(_this, _handle, _startVertex, _num);
    public static void EncoderSetInstanceCount(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, uint _numInstances) => bgfx.encoder_set_instance_count(_this, _numInstances);
    public static void EncoderSetTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _sampler, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, uint _flags) => bgfx.encoder_set_texture(_this, _stage, _sampler, _handle, _flags);
    public static void EncoderTouch(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id) => bgfx.encoder_touch(_this, _id);
    public static void EncoderSubmit(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, uint _depth, byte _flags) => bgfx.encoder_submit(_this, _id, _program, _depth, _flags);
    public static void EncoderSubmitOcclusionQuery(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _occlusionQuery, uint _depth, byte _flags) => bgfx.encoder_submit_occlusion_query(_this, _id, _program, _occlusionQuery, _depth, _flags);
    public static void EncoderSubmitIndirect(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, uint _num, uint _depth, byte _flags) => bgfx.encoder_submit_indirect(_this, _id, _program, _indirectHandle, _start, _num, _depth, _flags);
    public static void EncoderSubmitIndirectCount(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _numHandle, uint _numIndex, uint _numMax, uint _depth, byte _flags) => bgfx.encoder_submit_indirect_count(_this, _id, _program, _indirectHandle, _start, _numHandle, _numIndex, _numMax, _depth, _flags);
    public static void EncoderSetComputeIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.encoder_set_compute_index_buffer(_this, _stage, _handle, _access);
    public static void EncoderSetComputeVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.encoder_set_compute_vertex_buffer(_this, _stage, _handle, _access);
    public static void EncoderSetComputeDynamicIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.encoder_set_compute_dynamic_index_buffer(_this, _stage, _handle, _access);
    public static void EncoderSetComputeDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.encoder_set_compute_dynamic_vertex_buffer(_this, _stage, _handle, _access);
    public static void EncoderSetComputeIndirectBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.encoder_set_compute_indirect_buffer(_this, _stage, _handle, _access);
    public static void EncoderSetImage(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, byte _mip, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format) => bgfx.encoder_set_image(_this, _stage, _handle, _mip, _access, _format);
    public static void EncoderDispatch(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, uint _numX, uint _numY, uint _numZ, byte _flags) => bgfx.encoder_dispatch(_this, _id, _program, _numX, _numY, _numZ, _flags);
    public static void EncoderDispatchIndirect(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, uint _num, byte _flags) => bgfx.encoder_dispatch_indirect(_this, _id, _program, _indirectHandle, _start, _num, _flags);
    public static void EncoderDiscard(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, byte _flags) => bgfx.encoder_discard(_this, _flags);
    public static void EncoderBlit(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Encoder* _this, ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _dst, byte _dstMip, ushort _dstX, ushort _dstY, ushort _dstZ, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _src, byte _srcMip, ushort _srcX, ushort _srcY, ushort _srcZ, ushort _width, ushort _height, ushort _depth) => bgfx.encoder_blit(_this, _id, _dst, _dstMip, _dstX, _dstY, _dstZ, _src, _srcMip, _srcX, _srcY, _srcZ, _width, _height, _depth);
    public static void RequestScreenShot(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.FrameBufferHandle _handle, string _filePath) => bgfx.request_screen_shot(_handle, _filePath);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.RenderFrame RenderFrame(int _msecs) => bgfx.render_frame(_msecs);
    public static void SetPlatformData(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.PlatformData* _data) => bgfx.set_platform_data(_data);
    public static global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InternalData* GetInternalData() => bgfx.get_internal_data();
    public static nuint OverrideInternalTexturePtr(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, nuint _ptr) => bgfx.override_internal_texture_ptr(_handle, _ptr);
    public static nuint OverrideInternalTexture(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, ushort _width, ushort _height, byte _numMips, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format, ulong _flags) => bgfx.override_internal_texture(_handle, _width, _height, _numMips, _format, _flags);
    public static void SetMarker(string _name, int _len) => bgfx.set_marker(_name, _len);
    public static void SetState(ulong _state, uint _rgba) => bgfx.set_state(_state, _rgba);
    public static void SetCondition(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _handle, bool _visible) => bgfx.set_condition(_handle, _visible);
    public static void SetStencil(uint _fstencil, uint _bstencil) => bgfx.set_stencil(_fstencil, _bstencil);
    public static ushort SetScissor(ushort _x, ushort _y, ushort _width, ushort _height) => bgfx.set_scissor(_x, _y, _width, _height);
    public static void SetScissorCached(ushort _cache) => bgfx.set_scissor_cached(_cache);
    public static uint SetTransform(void* _mtx, ushort _num) => bgfx.set_transform(_mtx, _num);
    public static void SetTransformCached(uint _cache, ushort _num) => bgfx.set_transform_cached(_cache, _num);
    public static uint AllocTransform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Transform* _transform, ushort _num) => bgfx.alloc_transform(_transform, _num);
    public static void SetUniform(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _handle, void* _value, ushort _num) => bgfx.set_uniform(_handle, _value, _num);
    public static void SetIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle, uint _firstIndex, uint _numIndices) => bgfx.set_index_buffer(_handle, _firstIndex, _numIndices);
    public static void SetDynamicIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle, uint _firstIndex, uint _numIndices) => bgfx.set_dynamic_index_buffer(_handle, _firstIndex, _numIndices);
    public static void SetTransientIndexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientIndexBuffer* _tib, uint _firstIndex, uint _numIndices) => bgfx.set_transient_index_buffer(_tib, _firstIndex, _numIndices);
    public static void SetVertexBuffer(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _numVertices) => bgfx.set_vertex_buffer(_stream, _handle, _startVertex, _numVertices);
    public static void SetVertexBufferWithLayout(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.set_vertex_buffer_with_layout(_stream, _handle, _startVertex, _numVertices, _layoutHandle);
    public static void SetDynamicVertexBuffer(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _numVertices) => bgfx.set_dynamic_vertex_buffer(_stream, _handle, _startVertex, _numVertices);
    public static void SetDynamicVertexBufferWithLayout(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.set_dynamic_vertex_buffer_with_layout(_stream, _handle, _startVertex, _numVertices, _layoutHandle);
    public static void SetTransientVertexBuffer(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, uint _startVertex, uint _numVertices) => bgfx.set_transient_vertex_buffer(_stream, _tvb, _startVertex, _numVertices);
    public static void SetTransientVertexBufferWithLayout(byte _stream, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TransientVertexBuffer* _tvb, uint _startVertex, uint _numVertices, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexLayoutHandle _layoutHandle) => bgfx.set_transient_vertex_buffer_with_layout(_stream, _tvb, _startVertex, _numVertices, _layoutHandle);
    public static void SetVertexCount(uint _numVertices) => bgfx.set_vertex_count(_numVertices);
    public static void SetInstanceDataBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.InstanceDataBuffer* _idb, uint _start, uint _num) => bgfx.set_instance_data_buffer(_idb, _start, _num);
    public static void SetInstanceDataFromVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, uint _startVertex, uint _num) => bgfx.set_instance_data_from_vertex_buffer(_handle, _startVertex, _num);
    public static void SetInstanceDataFromDynamicVertexBuffer(global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, uint _startVertex, uint _num) => bgfx.set_instance_data_from_dynamic_vertex_buffer(_handle, _startVertex, _num);
    public static void SetInstanceCount(uint _numInstances) => bgfx.set_instance_count(_numInstances);
    public static void SetTexture(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.UniformHandle _sampler, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, uint _flags) => bgfx.set_texture(_stage, _sampler, _handle, _flags);
    public static void Touch(ushort _id) => bgfx.touch(_id);
    public static void Submit(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, uint _depth, byte _flags) => bgfx.submit(_id, _program, _depth, _flags);
    public static void SubmitOcclusionQuery(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.OcclusionQueryHandle _occlusionQuery, uint _depth, byte _flags) => bgfx.submit_occlusion_query(_id, _program, _occlusionQuery, _depth, _flags);
    public static void SubmitIndirect(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, uint _num, uint _depth, byte _flags) => bgfx.submit_indirect(_id, _program, _indirectHandle, _start, _num, _depth, _flags);
    public static void SubmitIndirectCount(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _numHandle, uint _numIndex, uint _numMax, uint _depth, byte _flags) => bgfx.submit_indirect_count(_id, _program, _indirectHandle, _start, _numHandle, _numIndex, _numMax, _depth, _flags);
    public static void SetComputeIndexBuffer(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.set_compute_index_buffer(_stage, _handle, _access);
    public static void SetComputeVertexBuffer(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.VertexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.set_compute_vertex_buffer(_stage, _handle, _access);
    public static void SetComputeDynamicIndexBuffer(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicIndexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.set_compute_dynamic_index_buffer(_stage, _handle, _access);
    public static void SetComputeDynamicVertexBuffer(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.DynamicVertexBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.set_compute_dynamic_vertex_buffer(_stage, _handle, _access);
    public static void SetComputeIndirectBuffer(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _handle, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access) => bgfx.set_compute_indirect_buffer(_stage, _handle, _access);
    public static void SetImage(byte _stage, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _handle, byte _mip, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.Access _access, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureFormat _format) => bgfx.set_image(_stage, _handle, _mip, _access, _format);
    public static void Dispatch(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, uint _numX, uint _numY, uint _numZ, byte _flags) => bgfx.dispatch(_id, _program, _numX, _numY, _numZ, _flags);
    public static void DispatchIndirect(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.ProgramHandle _program, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.IndirectBufferHandle _indirectHandle, uint _start, uint _num, byte _flags) => bgfx.dispatch_indirect(_id, _program, _indirectHandle, _start, _num, _flags);
    public static void Discard(byte _flags) => bgfx.discard(_flags);
    public static void Blit(ushort _id, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _dst, byte _dstMip, ushort _dstX, ushort _dstY, ushort _dstZ, global::Engine.Codegen.BgfxWrapper.Unsafe.bgfx.TextureHandle _src, byte _srcMip, ushort _srcX, ushort _srcY, ushort _srcZ, ushort _width, ushort _height, ushort _depth) => bgfx.blit(_id, _dst, _dstMip, _dstX, _dstY, _dstZ, _src, _srcMip, _srcX, _srcY, _srcZ, _width, _height, _depth);
}

